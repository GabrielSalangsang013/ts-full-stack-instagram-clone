import Head from "next/head";
import SideNav from "@/components/SideNav";
import Layout from "@/components/Layout";
import Image from "next/image";

import ProfileHeader from "@/components/ProfileHeader";
import ProfilePost from "@/components/ProfilePost";
import ProfileTabs from "@/components/ProfileTabs";
import Link from "next/link";
import PrivateRoutes from "@/components/PrivateRoutes";

import { useEffect, useState } from "react";
import { useRouter } from "next/router";

import OptimizeImage from "@/helpers/optimizedImage";

const ProfileSaved = ({authenticatedUser}: any) => {

    const router = useRouter();
    const { query } = router;
    const [loading, setLoading] = useState<boolean>(true);
    const [userProfile, setUserProfile] = useState<object>({});
    const [isOwned, setIsOwned] = useState<boolean>(false);
    const [sideNavActive, setSideNavActive] = useState<string>('');
    const [isAuthenticatedUserFollowThisProfile, setIsAuthenticatedUserFollowThisProfile] = useState<boolean>(false);
    const [authenticatedUserFollowingWhoFollowingThisProfile, setAuthenticatedUserFollowingWhoFollowingThisProfile] = useState<[]>([]);
    const [savePost, setSavePost] = useState<[]>([]);

    useEffect(() => {
        (async() => {
            try {
                const response = await fetch(`${process.env.REACT_APP_API}/api/v1/instagram/profile/${query.profile}`, {
                    method: 'GET',
                    credentials: 'include'
                });
    
                const response2 = await fetch(`${process.env.REACT_APP_API}/api/v1/instagram/profile/${query.profile}/saved/all-posts-limit-4`, {
                    method: 'GET',
                    credentials: 'include'
                });
    
                if (response.status !== 200 || response2.status !== 200) {
                    router.push('/home');
                } else {
                    const userProfile = await response.json();
                    const { savePost } = await response2.json();
    
                    if (userProfile.userProfile === undefined) {
                        router.push('/home');
                    }
    
                    if(userProfile.isOwned === false) {
                        setUserProfile(userProfile.userProfile);
                        setIsOwned(false);
                        setSideNavActive('');
                        setIsAuthenticatedUserFollowThisProfile(userProfile.isAuthenticatedUserFollowThisProfile);
                        setAuthenticatedUserFollowingWhoFollowingThisProfile(userProfile.authenticatedUserFollowingWhoFollowingThisProfile);
                    }else {
                        setUserProfile(userProfile.userProfile);
                        setIsOwned(userProfile.isOwned);
                        setSideNavActive(userProfile.isOwned ? 'Profile' : '');
                        setSavePost(savePost);
                    }
                }

                setLoading(false);
            } catch (error) {
                router.push('/home');
            }
        })();
    }, []); 

    return (
        <>
            <Head>
                <title>Instagram</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/instagram_icon.ico" />
            </Head>

            {
                !loading &&
                <Layout>
                    <SideNav authenticatedUser={authenticatedUser} sideNavActive={sideNavActive}/>
                    <div className="flex-1 p-4">
                        <div className="mx-auto max-w-[955px] pt-8">
                            <ProfileHeader 
                                userProfile={userProfile} 
                                isOwned={isOwned} 
                                isAuthenticatedUserFollowThisProfile={isAuthenticatedUserFollowThisProfile} 
                                authenticatedUserFollowingWhoFollowingThisProfile={authenticatedUserFollowingWhoFollowingThisProfile}
                            />

                            <ProfileTabs 
                                authenticatedUser={authenticatedUser}
                                isOwned={isOwned}
                                active={isOwned ? 'Saved' : 'Posts'} /* IF USER OWN THIS PROFILE THE ACTIVE TAB WILL SAVED ELSE ACTIVE TAB IS POSTS */
                            />

                            {/* IF USER OWNED THIS PROFILE, THE USER CAN SEE ALL SAVED POSTS */}
                            
                            {
                                isOwned ?
                                <main className="w-full">
                                    <div className="w-full flex flex-wrap gap-[16px]">
                                        <div className="w-full flex justify-between font-semibold mb-2">
                                            <span className="text-[12px] text-neutral-500 font-light">Only you can see what you have saved</span>
                                            <button type="button" className="text-blue-400 text-[14px]">+ New Collection</button>
                                        </div> 

                                        <Link href={`/${authenticatedUser.username}/saved/all-posts`} className="w-[calc(33.05%-12px)] h-full inline relative rounded-md overflow-hidden">
                                            <div className="w-full aspect-square relative cursor-pointer border border-neutral-200  flex flex-wrap gap-[2px] rounded-md">
                                                {
                                                    savePost.length > 0 &&
                                                    savePost.map((eachSavePost: any, index: number) => (
                                                        <div key={index} className="w-[calc(50%-1px)] max-h-[50%] object-contain">
                                                            <Image quality={100} priority width={2000} height={2000} crossOrigin="anonymous" src={OptimizeImage(eachSavePost.post_id.post[0].post, ['w_300', 'h_300', 'c_fill'])} alt="" className="h-[100%] object-cover"/>
                                                        </div>
                                                    ))
                                                }

                                            </div>

                                            <div className="w-full h-full absolute top-0 flex items-end p-4 rounded-md
                                                    bg-gradient-to-t 
                                                    from-[rgba(0,0,0,0.5)]
                                                    hover:bg-gradient-to-t
                                                    hover:from-[rgba(0,0,0,0.0)]
                                            ">
                                                <span className="text-white text-xl">All Posts</span>
                                            </div>
                                        </Link>
                                    </div>
                                </main>
                                :
                                <ProfilePost 
                                    userProfile={userProfile} 
                                    authenticatedUser={authenticatedUser}
                                />
                            }
                        </div>
                    </div>
                </Layout>
            }
        </>
    )
}

export default PrivateRoutes(ProfileSaved);

export async function getServerSideProps(context: any) {
    const { res } = context;

    res.setHeader("Cross-Origin-Opener-Policy", "same-origin");
    res.setHeader("Cross-Origin-Embedder-Policy", "require-corp");

    return {
        props: {}
    };
}