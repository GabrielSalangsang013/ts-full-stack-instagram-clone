import Head from "next/head";
import SideNav from "@/components/SideNav";
import Layout from "@/components/Layout";

import ProfileHeader from "@/components/ProfileHeader";
import ProfilePost from "@/components/ProfilePost";
import ProfileTabs from "@/components/ProfileTabs";

import PrivateRoutes from "@/components/PrivateRoutes";

import { useEffect, useState } from "react";
import { useRouter } from "next/router";

const Profile = ({authenticatedUser}: any) => {
    const router = useRouter();
    const { query } = router;
    const [loading, setLoading] = useState<boolean>(true);
    const [userProfile, setUserProfile] = useState<object>({});
    const [isOwned, setIsOwned] = useState<boolean>(false);
    const [sideNavActive, setSideNavActive] = useState<string>('');
    const [isAuthenticatedUserFollowThisProfile, setIsAuthenticatedUserFollowThisProfile] = useState<boolean>(false);
    const [authenticatedUserFollowingWhoFollowingThisProfile, setAuthenticatedUserFollowingWhoFollowingThisProfile] = useState<[]>([]);

    useEffect(() => {
        (async() => {
            try {
                const response = await fetch(`${process.env.REACT_APP_API}/api/v1/instagram/profile/${query.profile}`, {
                    method: 'GET',
                    credentials: 'include'
                });

                if (response.status !== 200) {
                    router.push('/home');
                } else {
                    const userProfile = await response.json();

                    if(userProfile.isOwned === false) {
                        setUserProfile(userProfile.userProfile);
                        setIsOwned(false);
                        setSideNavActive('');
                        setIsAuthenticatedUserFollowThisProfile(userProfile.isAuthenticatedUserFollowThisProfile);
                        setAuthenticatedUserFollowingWhoFollowingThisProfile(userProfile.authenticatedUserFollowingWhoFollowingThisProfile);
                    }else {
                        setUserProfile(userProfile.userProfile);
                        setIsOwned(true);
                        setSideNavActive(userProfile.isOwned ? 'Profile' : '');
                    }
                }

                setLoading(false);
            } catch (error) {
                router.push('/home');
            }
        })();
    }, []);

    return (
        <>
            <Head>
                <title>Instagram</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/instagram_icon.ico" />
            </Head>

            {
                !loading && 
                <Layout>
                    <SideNav authenticatedUser={authenticatedUser} sideNavActive={sideNavActive}/>
                    <div className="flex-1 p-4">
                        <div className="mx-auto max-w-[955px] pt-8">
                            <ProfileHeader 
                                userProfile={userProfile} 
                                isOwned={isOwned} 
                                isAuthenticatedUserFollowThisProfile={isAuthenticatedUserFollowThisProfile} 
                                authenticatedUserFollowingWhoFollowingThisProfile={authenticatedUserFollowingWhoFollowingThisProfile}
                            />

                            <ProfileTabs 
                                authenticatedUser={authenticatedUser}
                                isOwned={isOwned}
                                active={"Posts"}
                            />

                            <ProfilePost 
                                username={query.profile} 
                                authenticatedUser={authenticatedUser}
                            />
                        </div>
                    </div>
                </Layout>
            }
        </>
    )
}

export default PrivateRoutes(Profile);

export async function getServerSideProps(context: any) {
    const { res } = context;

    res.setHeader("Cross-Origin-Opener-Policy", "same-origin");
    res.setHeader("Cross-Origin-Embedder-Policy", "require-corp");

    return {
        props: {}
    };
}