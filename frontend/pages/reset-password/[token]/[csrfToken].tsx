import { useRouter } from "next/router";
import Image from "next/image";
import Head from "next/head";

import '../../globals.css';

import { useState, useEffect } from "react";
import { Formik, Field, Form, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import DOMPurify from 'dompurify';  // FOR SANITIZING USER INPUT TO PREVENT XSS ATTACKS BEFORE SENDING TO THE BACKEND

import FlexContainer from "@/components/FlexContainer";
import publicRoutes from "@/components/PublicRoutes";

type valuesParameter = {
    password: string,
    repeatPassword: string
}

const ResetPassword = () => {
    const router = useRouter();
    const { query, isReady } = useRouter();
    const token = router.query.token;
    const csrfToken = router.query.csrfToken;
    const [isAccountRecoveryResetPasswordTokenValid, setIsAccountRecoveryResetPasswordTokenValid] = useState(false); 
    const [isDisabled, setIsDisabled] = useState(false);

    const initialValues = {
        password: '',
        repeatPassword: ''
    };

    const validationSchema = Yup.object().shape({
        password: Yup.string()
            .required('Password is required')
            .min(12, 'Password must be at least 12 characters')
            .matches(
                /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()\-_=+{};:,<.>]).+$/,
                'Password must contain at least one uppercase letter, one lowercase letter, one digit, and one special character'
            )
            .test(
                'password-security',
                'Password should not be commonly used or easily guessable',
                (value) => !/\b(password|123456789)\b/i.test(value)
            ),
        repeatPassword: Yup.string()
            .oneOf([Yup.ref('password')], 'Passwords must match')
            .required('Please repeat your password')
    });

    const handleSubmit = (values: valuesParameter) => {
        const {password, repeatPassword} = values;
        let sanitizedreset_passwordPassword = DOMPurify.sanitize(password);
        let sanitizedreset_passwordRepeatPassword = DOMPurify.sanitize(repeatPassword);
        setIsDisabled(true);
        fetch(`${process.env.REACT_APP_API}/api/v1/authentication/reset-password`, {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json' 
            },
            credentials: 'include',
            body: JSON.stringify({
                token: token,
                csrfToken: csrfToken,
                password: sanitizedreset_passwordPassword,
                repeatPassword: sanitizedreset_passwordRepeatPassword
            })
        })
        .then((response) => response.json())
        .then((result) => {
            if(result.status === 'ok') {
                router.push('/login');
            }
         })
        .catch((error) => {
            setIsDisabled(false);
            alert(error);
        });
    };

    useEffect(() => {
        if (!isReady) return;
        if (!query.token) router.push("/")

        if(token !== null) {
            fetch(`${process.env.REACT_APP_API}/api/v1/authentication/account-recovery/reset-password/verify-token`, {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json' 
                },
                credentials: 'include',
                body: JSON.stringify({
                    token: token,
                    csrfToken: csrfToken
                })
            })
            .then((response) => response.json())
            .then((result) => {
                if(result.status === 'ok') {
                    setIsAccountRecoveryResetPasswordTokenValid(true);
                }
            })
            .catch((error) => {
                alert(error.message);
                router.push('/forgot-password');
            });
        }else {
            router.push('/');
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [isReady]);

    if(!isAccountRecoveryResetPasswordTokenValid) {
        return (
            <>
                <FlexContainer>
                    <Head>
                        <title>Reset Password â€¢ Instagram</title>
                        <meta name="description" content="Generated by create next app" />
                        <link rel="icon" href="/instagram_icon.ico" />
                    </Head>
                    
                    <main className="m-auto md:mt-20 md:w-[395px]">
                        <div className="md:border md:border-[#dfdfdf] pt-4 pb-10 px-10">
                            <div className="flex justify-center flex-col items-center">
                                <div className="h-30 py-10 flex items-center flex-col text-center">
                                    <Image width={175} height={51} priority src={'/instagram_logo.png'} className="mb-2 w-auto h-auto" alt="Logo" />
                                    <h1 className="font-[500] text-lg text-[20px] text-[#737373]">Loading...</h1>
                                    <p className="mt-8 text-md">Verifying may take a while. Please wait.</p>
                                </div>
                            </div>
                        </div>
                    </main>
                </FlexContainer>
            </>
        )
    }

    return  (
        <>
            <FlexContainer>
                <main className="m-auto md:mt-20 md:w-[395px]">
                    <div className="md:border md:border-[#dfdfdf] pt-4 pb-20 px-10">
                        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={handleSubmit}>
                            <Form>
                                <div className="flex justify-center flex-col items-center">
                                    <div className="h-30 py-10 flex items-center flex-col text-center">
                                        <Image width={175} height={51} priority src={'/instagram_logo.png'} className="mb-2 w-auto h-auto" alt="Logo" />
                                        <h1 className="font-[500] text-lg text-[20px] text-[#737373]">Reset Password</h1>
                                        <p className="mt-8 text-md">Complete the form to reset your password</p>
                                    </div>
                                    <Field disabled={isDisabled} className={`w-full bg-[#fafafa] leading-[25px] text-[14px] py-[8px] px-[12px] border border-[#e9e9e9] mb-2 rounded-sm ${isDisabled && `opacity-50`}`} placeholder='New Password' type="password" id="password" name="password"/>
                                    <ErrorMessage name="password" component="div" className="text-left w-full flex justify-left text-[14px] mb-3 text-red-600"/>
                                    <Field disabled={isDisabled} className={`w-full bg-[#fafafa] leading-[25px] text-[14px] py-[8px] px-[12px] border border-[#e9e9e9] mb-2 rounded-sm ${isDisabled && `opacity-50`}`} placeholder='Repeat New Password' type="password" id="repeatPassword" name="repeatPassword"/>
                                    <ErrorMessage name="repeatPassword" component="div" className="text-left w-full flex justify-left text-[14px] mb-3 text-red-600"/>   
                                    <button disabled={isDisabled} className={`flex items-center justify-center w-full bg-[#4cb5f9] px-[-20px] py-2 font-[500] text-white mt-2 rounded-lg ${isDisabled && `opacity-50`}`} type="submit">
                                        {isDisabled && <Image width={14.5} height={15} style={{marginRight:'10px'}} src={'/spinner-circle-light.svg'} alt="none" />}
                                        Submit
                                    </button>
                                </div>
                            </Form>
                        </Formik>
                    </div>
                </main>
            </FlexContainer>
        </>
    )
}

export default publicRoutes(ResetPassword);
