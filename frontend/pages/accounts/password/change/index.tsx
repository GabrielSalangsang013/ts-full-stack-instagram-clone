import Head from "next/head";
import SideNav from "@/components/SideNav";
import Layout from "@/components/Layout";
import Link from "next/link";
import Image from "next/image";

import { useState } from "react";
import { ErrorMessage, Field, Form, Formik } from "formik";
import * as Yup from 'yup';
import DOMPurify from "dompurify";
import OptimizeImage from "@/helpers/optimizedImage";
import PrivateRoutes from "@/components/PrivateRoutes";

const UpdatePassword = ({authenticatedUser}: any) => {
    const [isDisabled, setIsDisabled] = useState<boolean>(false);

    const initialValuesUpdatePassword = {
        oldPassword: '',
        newPassword: '',
        repeatNewPassword: ''
    }

    const validationSchemaUpdatePassword = Yup.object().shape({
        oldPassword: Yup.string()
            .required('Old Password is required')
            .min(12, 'Old Password must be at least 12 characters')
            .matches(
                /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()\-_=+{};:,<.>]).+$/,
                'Old Password must contain at least one uppercase letter, one lowercase letter, one digit, and one special character'
            )
            .test(
                'old-password-security',
                'Old Password should not be commonly used or easily guessable',
                (value) => !/\b(password|123456789)\b/i.test(value)
            ),
        newPassword: Yup.string()
            .required('New Password is required')
            .min(12, 'New Password must be at least 12 characters')
            .matches(
                /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()\-_=+{};:,<.>]).+$/,
                'New Password must contain at least one uppercase letter, one lowercase letter, one digit, and one special character'
            )
            .test(
                'new-password-security',
                'New Password should not be commonly used or easily guessable',
                (value) => !/\b(password|123456789)\b/i.test(value)
            ),
        repeatNewPassword: Yup.string()
            .oneOf([Yup.ref('newPassword')], 'Passwords must match')
            .required('Please repeat your password'),
    });


    const handleSubmitUpdatePassword = async (values: any) => {
        const {oldPassword, newPassword, repeatNewPassword} = values;

        const sanitizedOldPassword = DOMPurify.sanitize(oldPassword);
        const sanitizedNewPassword = DOMPurify.sanitize(newPassword);
        const sanitizedRepeatNewPassword = DOMPurify.sanitize(repeatNewPassword);

        setIsDisabled(true);

        fetch(`${process.env.REACT_APP_API}/api/v1/instagram/user/password`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            credentials: 'include',
            body: JSON.stringify({
                oldPassword: sanitizedOldPassword,
                newPassword: sanitizedNewPassword,
                repeatNewPassword: sanitizedRepeatNewPassword,
            })
        })
        .then((response) => response.json())
        .then((result) => {
            if(result.status === 'ok') {
                setIsDisabled(false);
                alert('sucess');
            }
        })
        .catch((error) => {
            setIsDisabled(false);
            alert(error);
        });
    }

    return (
        <>
            <Head>
                <title>Edit profile | Instagram</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/instagram_icon.ico" />
            </Head>

            <Layout>
                <SideNav authenticatedUser={authenticatedUser} sideNavActive={''}/>
                <div className="flex-1 py-8 flex">
                    <div className="w-[315px] border-r border-r-neutral-200 flex flex-col">
                        <div className="mr-[48px] ml-[36px] mb-[24px] px-[16px]">
                            <h1 className="text-[20px] font-bold">Settings</h1>
                        </div>
                        <div className="mr-[48px] ml-[36px] hover:bg-neutral-200 rounded-[8px]">
                            <Link href="/accounts/edit">
                                <button className="p-[16px] w-full text-left text-[14px]" type="button">
                                    Edit profile
                                </button>
                            </Link>
                        </div>  
                        <div className="mr-[48px] ml-[36px] bg-neutral-100 hover:bg-neutral-200 rounded-[8px]">
                            <button className="p-[16px] w-full text-left text-[14px]" type="button">
                                Change Password
                            </button>
                        </div>  
                    </div>
                    <div className="flex-1 flex flex-col">
                        <div className="w-full mt-[32px] flex items-center">
                            <div className="ml-[124px] mr-[32px]">
                                <Image width={64} height={64} crossOrigin="anonymous" src={OptimizeImage(authenticatedUser.profile.profilePicture, ['w_64', 'h_64', 'c_fill'])} alt={authenticatedUser.username + ' profile picture'} className="w-[38px] h-[38px] object-cover rounded-[50%] border border-neutral-200" />
                            </div>
                            <div className="flex-1 flex flex-col leading-[17px]">
                                <span className="">{authenticatedUser.username}</span>
                            </div>
                        </div>

                        <Formik validationSchema={validationSchemaUpdatePassword} initialValues={initialValuesUpdatePassword} onSubmit={handleSubmitUpdatePassword}>
                            <Form>
                                <div className="w-full mt-[24px] flex">
                                    <div className="basis-[194px] text-right px-[32px] pt-1">
                                        <span className="font-semibold">Old password</span>
                                    </div>
                                    <div className="flex flex-col leading-[17px] w-[355px]">
                                        <Field disabled={isDisabled} className={`w-full px-[10px] h-[32px] border border-neutral-200 rounded-sm focus:outline-0 ${isDisabled && `opacity-50`}`} type="password" id="oldPassword" name="oldPassword"/>
                                        <ErrorMessage name="oldPassword" component="div" className="text-left w-full flex justify-left text-[14px] mb-3 text-red-600"/>  
                                    </div>
                                </div>

                                <div className="w-full mt-[24px] flex">
                                    <div className="basis-[194px] text-right px-[32px] pt-1">
                                        <span className="font-semibold">New password</span>
                                    </div>
                                    <div className="flex flex-col leading-[17px] w-[355px]">
                                        <Field disabled={isDisabled} className={`w-full px-[10px] h-[32px] border border-neutral-200 rounded-sm focus:outline-0 ${isDisabled && `opacity-50`}`} type="password" id="newPassword" name="newPassword"/>
                                        <ErrorMessage name="newPassword" component="div" className="text-left w-full flex justify-left text-[14px] mb-3 text-red-600"/>  
                                    </div>
                                </div>

                                <div className="w-full mt-[24px] flex">
                                    <div className="basis-[194px] text-right px-[32px] pt-1">
                                        <span className="font-semibold">Confirm new password</span>
                                    </div>
                                    <div className="flex flex-col leading-[17px] w-[355px]">
                                        <Field disabled={isDisabled} className={`w-full px-[10px] h-[32px] border border-neutral-200 rounded-sm focus:outline-0 ${isDisabled && `opacity-50`}`} type="password" id="repeatNewPassword" name="repeatNewPassword"/>
                                        <ErrorMessage name="repeatNewPassword" component="div" className="text-left w-full flex justify-left text-[14px] mb-3 text-red-600"/>
                                    </div>
                                </div>

                                <div className="w-full mt-[24px] flex">
                                    <div className="basis-[194px] text-right px-[32px] pt-1">

                                    </div>
                                    <div className="">
                                        <button className="px-[16px] rounded-lg h-[32px] text-[14px] bg-sky-500 hover:bg-blue-500 text-white font-medium" type="submit">Change Password</button>
                                    </div>
                                </div>
                            </Form>
                        </Formik>
                    </div>
                </div>
            </Layout>
        </>
    )
}

export default PrivateRoutes(UpdatePassword);

export async function getServerSideProps(context: any) {
    const { res } = context;

    res.setHeader("Cross-Origin-Opener-Policy", "same-origin");
    res.setHeader("Cross-Origin-Embedder-Policy", "require-corp");

    return {
        props: {}
    };
}